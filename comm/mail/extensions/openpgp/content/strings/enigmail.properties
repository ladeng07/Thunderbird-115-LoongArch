# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

#####################################################################
# Strings used within enigmailCommon.js and enigmailCommon.jsm
#####################################################################

### dlgYes=&Yes
### dlgNo=&No
### dlg.button.overwrite=&Overwrite
### dlg.button.ignore=&Ignore
### dlg.button.install=&Install

#####################################################################
### Strings in enigmailAbout.js
#####################################################################

### usingAgent=Using %1$S executable %2$S to encrypt and decrypt

#####################################################################
# Strings in enigmailKeygen.js
#####################################################################

### onlyGPG=Key generation only works with GnuPG (not with PGP)!

### keygenComplete=Key generation completed! Identity <%S> will be used for signing.
### revokeCertRecommended=We highly recommend to create a revocation certificate for your key. This certificate can be used to invalidate your key, e.g. in case your secret key gets lost or compromised. Do you want to create such a revocation certificate now?
### keyMan.button.generateCert=&Generate Certificate
### genCompleteNoSign=Key generation completed!

### passNoMatch=Passphrase entries do not match; please re-enter
### passCheckBox=Please check box if specifying no passphrase for key
### passUserName=Please specify user name for this identity
### keygen.passCharProblem=You are using special characters in your passphrase. Unfortunately, this can cause troubles for other applications. We recommend you choose a passphrase consisting only of any of these characters:\na-z A-Z 0-9 /.;:-,!?(){}[]%*
### passSpaceProblem=Due to technical reasons, your passphrase may not start or end with a space character.
### changePassFailed=Changing the passphrase failed.

### expiryTooLongShorter=You cannot create a key that expires in more than 90 years.
### setKeyExpirationDateFailed=The expiration date could not be changed

### notePartEncrypted2=*Parts of the message have NOT been signed nor encrypted*
### noteCutMessage2=*Multiple message blocks found -- decryption/verification aborted*

### detailsDlg.importKey=Import key
### wksNoIdentity=This key is not linked to any of your email accounts. Please add an account for at least one of the following email addresse(s):\n\n%S
### wksConfirmSuccess=Confirmation email sent.
### wksConfirmFailure=Sending the confirmation email failed.

#####################################################################
# Strings in enigmailMsgComposeOverlay.js
#####################################################################

### keysToUse=Select OpenPGP Key(s) to use for %S
### pubKey=Public key for %S\n

### composeSpecifyEmail=Please specify your primary email address, which will be used to choose the signing key for outgoing messages.\n If you leave it blank, the FROM address of the message will be used to choose the signing key.
### attachWarning=Attachments to this message are not local, they cannot be encrypted. In order to encrypt the attachments, store them as local files first and attach these files. Do you wish to send the message anyway?
### warning=Warning
### signIconClicked=You have manually modified signing. Therefore, while you are composing this message, (de)activating signing does not depend anymore on (de)activating encryption.

### msgCompose.internalEncryptionError=Internal Error: promised encryption disabled

### msgCompose.protectSubject.tooltip=Protect the message subject
### msgCompose.noSubjectProtection.tooltip=Do not protect the message subject
### msgCompose.protectSubject.dialogTitle=Enable Protection of Subject?
### msgCompose.protectSubject.question=Regular encrypted emails contain the unredacted subject.\n\nWe have established a standard to hide the original subject in the encrypted message\nand replace it with a dummy text, such that the subject is only visible after the email is decrypted.\n\nDo you want to protect the subject in encrypted messages?
### msgCompose.protectSubject.yesButton=&Protect subject
### msgCompose.protectSubject.noButton=&Leave subject unprotected

# note: should end with double newline:

# details:

### statPGPMIME=PGP/MIME
### statSMIME=S/MIME
### statSigned=SIGNED
### statEncrypted=ENCRYPTED
### statPlain=UNSIGNED and UNENCRYPTED

### offlineSave=Save %1$S message to %2$S in Unsent Messages folder?

### onlineSend=Send %1$S message to %2$S?
### encryptKeysNote=Note: The message is encrypted for the following User IDs / Keys: %S
### hiddenKey=<hidden key>

### msgCompose.button.sendUnencrypted=&Send Unencrypted Message
### recipientsSelectionHdr=Select Recipients for Encryption

# encryption/signing status and associated reasons:
### encryptMessageAuto=Encrypt Message (auto)
### encryptMessageNorm=Encrypt Message
### signMessageAuto=Sign Message (auto)
### signMessageNorm=Sign Message

### encryptOff=Encryption: OFF
### encryptOnWithReason=Encryption: ON (%S)
### encryptOffWithReason=Encryption: OFF (%S)
### encryptOn=Encryption: ON
### signOn=Signing: ON
### signOff=Signing: OFF
### signOnWithReason=Signing: ON (%S)
### signOffWithReason=Signing: OFF (%S)
### reasonEnabledByDefault=enabled by default
### reasonManuallyForced=manually forced
### reasonByRecipientRules=forced by per-recipient rules
### reasonByAutoEncryption=forced by auto encryption
### reasonByConflict=due to conflict in per-recipient rules
### reasonByEncryptionMode=due to encryption mode

# should not be used anymore:
### encryptYes=Message will be encrypted

# should not be used anymore:
### signYes=Message will be signed


# PGP/MIME status:
### pgpmimeNormal=Protocol: PGP/MIME
### inlinePGPNormal=Protocol: Inline PGP
### smimeNormal=Protocol: S/MIME
### pgpmimeAuto=Protocol: PGP/MIME (auto)
### inlinePGPAuto=Protocol: Inline PGP (auto)
### smimeAuto=Protocol: S/MIME (auto)

# should not be used anymore
### pgpmimeYes=PGP/MIME will be used
### pgpmimeNo=Inline PGP will be used

# Attach own key status (tooltip strings):
### attachOwnKeyYes=Your own public key will be attached
### attachOwnKeyDisabled=Your own public key cannot be attached. You have to select a specific key\nin the OpenPGP section of the Account Settings to enable this feature.

### rulesConflict=Conflicting per-recipient rules detected\n%S\n\nSend message with these settings?
### msgCompose.button.configure=&Configure
### msgCompose.button.save=&Save Message

# Strings in enigmailMsgHdrViewOverlay.js
### signatureFrom=Signature from public key %S
### clickDecrypt=; use 'Decrypt/Verify' function
### clickDecryptRetry=; use 'Decrypt/Verify' function to retry
### clickDetailsButton=; click on 'Details' button for more information
### clickImportButton=; click on the 'Import Key' button to import the key
### keyTypeUnsupported=; the key type is not supported by your version of GnuPG
### decryptManually=; click on the 'Decrypt' button to decrypt the message
### verifyManually=; click on the 'Verify' button to verify the signature
### headerView.button.verify=Verify
### headerView.button.decrypt=Decrypt
### msgPart=Part of the message %S
### msgSigned=signed
### msgSignedUnkownKey=signed with unknown key
### msgEncrypted=encrypted
### msgSignedAndEnc=signed and encrypted

### goodSig=Good signature
### uncertainSig=Uncertain signature
### badSig=Bad signature
### incompleteDecrypt=Decryption incomplete
### needKey=Error - no matching secret key found to decrypt message
### badPhrase=Error - bad passphrase
### missingMdcError=Error - missing or broken integrity protection (MDC)
### failedDecryptVerify=Error - decryption/verification failed
### brokenExchangeMessage=Broken PGP/MIME message from MS-Exchange.

### decryptedMsg=Decrypted message

### usedAlgorithms=Used Algorithms: %1$S and %2$S

### wksConfirmationReq=Web Key Directory Confirmation Request
### wksConfirmationReq.message=This message has been sent by your email provider to confirm deployment of your OpenPGP public key\nin their Web Key Directory.\nProviding your public key helps others to discover your key and thus being able to encrypt messages to you.\n\nIf you want to deploy your key in the Web Key Directory now, please click on the button "Confirm Request" in the status bar.\nOtherwise, simply ignore this message.
### wksConfirmationReq.button.label=Confirm Request

### autocryptSetupReq.setupMsg.desc=This message contains all information to transfer your Autocrypt settings along with your secret key securely from your original device.
### autocryptSetupReq.setupMsg.backup=You can keep this message and use it as a backup for your secret key. If you want to do this, you should write down the password and store it securely.
### autocryptSetupReq.message.sent=Please click on the message on your new device and follow the instuctions to import the settings.

# strings in pref-enigmail.js
### locateGpg=Locate GnuPG program
### warningsAreReset=All warnings have been reset.
### prefs.gpgFound=GnuPG was found in %S
### prefs.gpgNotFound=Could not find GnuPG
### prefEnigmail.oneKeyserverOnly=Error - you can only specify one keyserver for automatic downloading of missing OpenPGP keys.
### acSetupMessage.desc=Transfer your key to another Autocrypt-enabled device. (<html:span class='enigmailLink' href='https://autocrypt.org'>What is Autocrypt</html:span>)

# Strings used in core.jsm
# (said file also re-uses some strings from above)

### enterAdminPin=Please type in the ADMIN PIN of your SmartCard
### enterCardPin=Please type your SmartCard PIN

### badCommand=Error - encryption command failed
### cmdLine=command line and output:
### notComplete=Error - key generation not yet completed

### noPassphrase=Error - no passphrase supplied

# Strings used in enigmailSingleRcptSettings.js
### noEncryption=You have activated encryption, but you did not select a key. In order to encrypt emails sent to %1$S, you need to specify one or several valid key(s) from your key list. Do you want to disable encryption for %2$S?
### noKeyToUse=(none - no encryption)
### noEmptyRule=The Rule may not be empty! Please set an email address in the Rule field.
### invalidAddress=The email address(es) you have entered are not valid. You should not set the names of the recipients, just the email addresses. E.g.:\nInvalid: Some Name <some.name@address.net>\nValid:   some.name@address.net
### noCurlyBrackets=The curly brackets {} have a special meaning and should not be used in an email address. If you want to modify the matching behavior for this rule, use the 'Apply rule if recipient ...' option.\nMore information is available from the Help button.

# Strings used in enigmailRulesEditor.js
### never=Never
### always=Always
### possible=Possible
### deleteRule=Really delete the selected rule?
### nextRcpt=(Next recipient)
### negateRule=Not
### addKeyToRule=Add key %1$S (%2$S) to per-recipient rule

# Strings used in enigmailSearchKey.js
### noKeyserverConn=Could not connect to keyserver at %S.
### internalError=An internal error occurred. The keys could not be downloaded or imported.
### keyDownload.keyUnavailable=The key with ID %S is not available on the keyserver. Most likely, the owner of the key did not upload their key to the keyserver.\n\nPlease ask the sender of the message to send you their public key by email.

# Strings in enigmailEditKeyTrustDlg.xhtml
### setKeyTrustFailed=Setting owner trust failed

# Strings in enigmailSignKeyDlg.js
### signKeyFailed=Key signing failed
### alreadySigned.label=Note: the key %S is already signed with the selected secret key.
### alreadySignedexportable.label=Note: the key %S is already signed exportable with the selected secret key. A local signature does not make sense.
### partlySigned.label=Note: some user IDs of key %S are already signed with the selected secret key.
### noTrustedOwnKeys=No eligible key found for signing! You need at least one fully trusted secret key in order to sign keys.

# Strings in enigmailKeyManager.js
### keyValid.noSubkey=no valid subkey

### keyType.public=pub
### keyType.publicAndSec=pub/sec

### addUidOK=User ID added successfully
### addUidFailed=Adding the User ID failed

### sendKeysOk=Key(s) sent successfully
### sendKeysFailed=Sending of keys failed
### receiveKeysOk=Key(s) updated successfully
### receiveKeysFailed=Downloading of keys failed
### keyUpload.verifyEmails=The keyserver will send you an email for each email address of your uploaded key. To confirm publication of your key, you'll need to click on the link in each of the emails you'll receive.

### deleteKeyFailed=The key could not be deleted.
### revokeKeyOk=The key has been revoked. If your key is available on a key server, it is recommended to re-upload it, so that others can see the revocation.
### revokeKeyFailed=The key could not be revoked.
### refreshKeyServiceOn.warn=Warning: Your keys are currently being refreshed in the background as safely as possible.\nRefreshing all your keys at once will unnecessarily reveal information about you.\nDo you really want to do this?
### downloadContactsKeys.importFrom=Import contacts from address book '%S'?

### keylist.noOtherUids=Has no other identities
### keylist.hasOtherUids=Also known as
### keylist.noPhotos=No photo available
### keylist.hasPhotos=Photos

### keyMan.addphoto.filepicker.title=Select photo to add
### keyMan.addphoto.warnLargeFile=The file you have chosen is larger than 25 kB.\nIt is not recommended to add very large files as it causes very large keys.
### keyMan.addphoto.noJpegFile=The selected file does not appear to be a JPEG file. Please choose a different file.
### keyMan.addphoto.failed=The photo could not be added.
### noWksIdentity=The key %S does not have a WKS identity.
### wksUpload.noKeySupported=The upload was not successful - your provider does not seem to support WKS.


# Strings in enigmailManageUidDlg.xhtml
### changePrimUidFailed=Changing the primary User ID failed
### changePrimUidOK=The primary user ID was changed successfully
### revokeUidFailed=Revoking the user ID %S failed
### revokeUidOK=User ID %S was revoked successfully. If your key is available on a key server, it is recommended to re-upload it, so that others can see the revocation.
### revokeUidQuestion=Do you really want to revoke the user ID %S?

# Strings in enigmailGenCardKey.xhtml
### keygen.started=Please wait while the key is being generated ....
### keygen.completed=Key Generated. The new Key ID is: 0x%S
### keygen.keyBackup=The key is backed up as %S
### keygen.passRequired=Please specify a passphrase if you want to create a backup copy of your key outside your SmartCard.

# Strings in enigmailSetCardPin.xhtml
### cardPin.processFailed=Failed to change PIN

# Strings in enigRetrieveProgres.js
### keyserverProgress.refreshing=Refreshing keys, please wait ...
### keyserverProgress.uploading=Uploading keys, please wait ...
### keyserverProgress.wksUploadFailed=Could not upload your key to the Web Key Service
### keyserverProgress.wksUploadCompleted=Your public key was successfully submitted to your provider. You will receive an email to confirm that you initiated the upload.
### keyserverTitle.refreshing=Refresh Keys
### keyserverTitle.uploading=Key Upload
### keyserver.result.download.none=No key downloaded.
### keyserver.result.download.1of1=Key successfully downloaded.
### keyserver.result.download.1ofN=Successfully downloaded 1 of %S keys.
### keyserver.result.download.NofN=Successfully downloaded %1$S of %2$S keys.
### keyserver.result.uploadOne=Successfully uploaded 1 key.
### keyserver.result.uploadMany=Successfully uploaded %S keys.

# Strings in installGnuPG.jsm
### installGnuPG.downloadFailed=An error occurred while trying to download GnuPG. Please check the console log for further details.
### installGnuPG.installFailed=An error occurred while installing GnuPG. Please check the console log for further details.

# Strings in enigmailAddUidDlg.xhtml
### addUidDlg.nameOrEmailError=You have to fill in a name and an email address
### addUidDlg.nameMinLengthError=The name must at least have 5 characters
### addUidDlg.invalidEmailError=You must specify a valid email address

# Strings in enigmailCardDetails.js
### Carddetails.NoASCII=OpenPGP Smartcards only support ASCII characters in Firstname/Name.

# network error types
### errorType.SecurityCertificate=The security certificate presented by the web service is not valid.
### errorType.SecurityProtocol=The security protocol used by the web service is unknown.
### errorType.Network=A network error has occurred.

### converter.decryptAtt.failed=Could not decrypt attachment '%1$S'\nof message with subject\n'%2$S'.\nDo you want to retry with a different passphrase or do you want to skip the message?

### saveLogFile.title=Save Log File

#strings in exportSettingsWizard.js
### cannotWriteToFile=Cannot save to file '%S'. Please select a different file.
### dataExportError=An error occurred during exporting your data.
### specifyExportFile=Specify file name for exporting
### homedirParamNotSUpported=Additional parameters that configure paths such as --homedir and --keyring are not supported for exporting/restoring your settings. Please use alternative methods such as setting the environment variable GNUPGHOME.

#strings in gpgAgent.jsm
### gpghomedir.notexists=The directory '%S' containing your OpenPGP keys does not exist and cannot be created.
### gpghomedir.notwritable=The directory '%S' containing your OpenPGP keys is not writable.
### gpghomedir.notdirectory=The directory '%S' containing your OpenPGP keys is a file instead of a directory.
### gpghomedir.notusable=Please fix the directory permissions or change the location of your GnuPG "home" directory. GnuPG cannot work correctly otherwise.

### handshakeDlg.button.initHandshake=Handshake...
### handshakeDlg.button.stopTrust=Stop Trusting
### handshakeDlg.button.reTrust=Stop Mistrusting
### handshakeDlg.label.outgoingMessage=Outgoing message
### handshakeDlg.label.incomingMessage=Incoming message
### handshakeDlg.error.noPeers=Cannot handshake without any correspondents.
### handshakeDlg.error.noProtection=Please enable protection in order to use the "Handshake" function.

### enigmail.acSetupPasswd.descEnterPasswd=Please enter the setup code that is displayed on the other device.
### enigmail.acSetupPasswd.descCopyPasswd=Please enter the setup code below on your other device to proceed with the setup.

#strings in autocrypt.jsm

### autocrypt.setupMsg.subject=Autocrypt Setup Message
### autocrypt.setupMsg.msgBody=To set up your new device for Autocrypt, please follow the instuctions that should be presented by your new device.
### autocrypt.setupMsg.fileTxt=This is the Autocrypt setup file used to transfer settings and keys between clients. You can decrypt it using the setup code displayed on your old device, then import the key to your keyring.

#strings in gnupg-key.jsm
### import.secretKeyImportError=An error has occurred in GnuPG while importing secret keys. The import was not successful.

#strings in importSettings.js
### importSettings.errorNoFile=The file you specified is not a regular file!
### importSettings.cancelWhileInProgress=Restoring is in progress. Do you really want to abort the process?
### importSettings.button.abortImport=&Abort process
